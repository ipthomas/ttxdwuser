package main

import (
	"crypto/tls"
	"fmt"
	"log"
	"net/smtp"
)

func (i *NotifyEvent) Notify() error {
	var err error
	auth := smtp.PlainAuth("", i.From, i.Password, i.Server)
	conn, err := smtp.Dial(i.Server + ":" + i.Port)
	if err != nil {
		log.Println(err.Error())
		return err
	}
	defer conn.Close()
	tlsConfig := &tls.Config{
		InsecureSkipVerify: true,
	}
	if err = conn.StartTLS(tlsConfig); err != nil {
		log.Println(err.Error())
		return err
	}
	if err = conn.Auth(auth); err != nil {
		log.Println(err.Error())
		return err
	}
	if err = conn.Mail(i.From); err != nil {
		log.Println(err.Error())
		return err
	}
	if err = conn.Rcpt(i.To); err != nil {
		log.Println(err.Error())
		return err
	}
	wc, err := conn.Data()
	if err != nil {
		log.Println(err.Error())
		return err
	}
	defer wc.Close()
	if _, err = fmt.Fprint(wc, i.Body); err != nil {
		log.Println(err.Error())
	} else {
		log.Printf("Notification sent to %s", i.To)
	}

	return err
}

// func (i *NotifyEvent) Notify() error {
// 	// Sender and recipient email addresses
// 	from := i.From //"sender@example.com"
// 	to := i.To     //"recipient@example.com"

// 	// SMTP server configuration
// 	smtpHost := i.Server       //"smtp.example.com"
// 	smtpPort := i.Port         //"587"
// 	smtpUsername := i.From     //"your_username"
// 	smtpPassword := i.Password //"your_password"

// 	// Create a new message
// 	msg := &bytes.Buffer{}
// 	writer := multipart.NewWriter(msg)
// 	defer writer.Close()

// 	// Create and add the HTML part of the email
// 	htmlPart, _ := writer.CreatePart(textproto.MIMEHeader{
// 		"Content-Type": []string{"text/html; charset=UTF-8"},
// 	})
// 	htmlbody := "<html><body><img src=\"cid:logo.png\"><h1>Workflow Event Notification</h1><p>" + i.Body + "</p></body></html>"
// 	htmlPart.Write([]byte(htmlbody))

// 	// Attach the image as an inline attachment
// 	imagePart, _ := writer.CreatePart(textproto.MIMEHeader{
// 		"Content-Type":        []string{"image/png"},
// 		"Content-Disposition": []string{"inline; filename=logo.png"},
// 		"Content-ID":          []string{"<logo.png>"},
// 	})
// 	base64Image := ""
// 	imageData, err := base64.StdEncoding.DecodeString(base64Image)
// 	if err != nil {
// 		fmt.Println("Error decoding base64 image:", err)
// 		return err
// 	}
// 	imagePart.Write(imageData)

// 	// Authenticate and send the email
// 	auth := smtp.PlainAuth("", smtpUsername, smtpPassword, smtpHost)
// 	err = smtp.SendMail(smtpHost+":"+smtpPort, auth, from, []string{to}, msg.Bytes())
// 	if err != nil {
// 		fmt.Println("Error sending email:", err)
// 		return err
// 	}

// 	fmt.Println("Email sent successfully!")
// 	return nil
// }
